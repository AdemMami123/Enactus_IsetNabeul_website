rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Users collection - private data
    match /users/{userId} {
      // Allow user to create their own document during registration
      allow create: if request.auth != null && request.auth.uid == userId;
      
      // Users can read their own data
      allow get: if request.auth != null && request.auth.uid == userId;
      
      // Users can update their own data (but not role or accountStatus)
      allow update: if request.auth != null && request.auth.uid == userId &&
                       !request.resource.data.diff(resource.data).affectedKeys().hasAny(['role', 'accountStatus']);
      
      // Any authenticated user can list/query approved users (for team page)
      allow list: if request.auth != null;
      
      // Any authenticated user can read approved user documents (for team page)
      allow get: if request.auth != null && resource.data.accountStatus == 'approved';
      
      // Admins can do everything
      allow read, write: if request.auth != null && 
                             exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
                             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    // Members collection - public data for homepage
    match /members/{memberId} {
      // Anyone can read member profiles (for homepage floating members)
      allow read: if true;
      
      // Users can create/update their own member profile
      allow create, update: if request.auth != null && 
                              (request.auth.uid == memberId || 
                               request.auth.uid == request.resource.data.userId);
      
      // Admins can manage all member profiles
      allow write: if request.auth != null && 
                      exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
                      get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
      
      // Users can delete their own member profile
      allow delete: if request.auth != null && 
                       (request.auth.uid == memberId || 
                        request.auth.uid == resource.data.userId);
    }
    
    // Absences collection - attendance tracking
    match /absences/{absenceId} {
      // All authenticated users can read absences
      allow read: if request.auth != null;
      
      // Only admins can create, update, or delete absences
      allow create, update, delete: if request.auth != null && 
                                       exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
                                       get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    // Posts collection - news and achievements
    match /posts/{postId} {
      // Anyone can read posts (including unauthenticated for homepage)
      allow read: if true;
      
      // Authenticated users can create posts
      allow create: if request.auth != null &&
                       request.resource.data.authorId == request.auth.uid;
      
      // Users can update/delete their own posts
      allow update, delete: if request.auth != null &&
                               resource.data.authorId == request.auth.uid;
      
      // Admins can update/delete any post
      allow update, delete: if request.auth != null && 
                               exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
                               get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    // Events collection - agenda/calendar events and tasks
    match /events/{eventId} {
      // All authenticated users can read events
      allow read: if request.auth != null;
      
      // Authenticated users can create events
      allow create: if request.auth != null &&
                       request.resource.data.createdBy == request.auth.uid;
      
      // Users can update their own events
      allow update: if request.auth != null &&
                       resource.data.createdBy == request.auth.uid;
      
      // Users can delete their own events
      allow delete: if request.auth != null &&
                       resource.data.createdBy == request.auth.uid;
      
      // Admins can manage all events
      allow write: if request.auth != null && 
                      exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
                      get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
  }
}

